y_test_mean = mean(y_test)
# Calculate total sum of squares
tss =  sum((y_test - y_test_mean)^2 )
# Calculate residual sum of squares
rss =  sum(residuals^2)
# Calculate R-squared
rsq  =  1 - (rss/tss)
cat('The R-square of the test data is ', round(rsq,3), '\n')
options(repr.plot.width=8, repr.plot.height=4)
my_data = as.data.frame(cbind(predicted = predicted,
observed = y_test))
# Plot predictions vs test data
ggplot(my_data,aes(predicted, observed)) + geom_point(color = "darkred", alpha = 0.5) +
geom_smooth(method=lm)+ ggtitle('Gradient Boosted Machines ') + ggtitle("Gradient Boosting Machines: Prediction vs Test Data") +
xlab("Predecited Trip Duration in Minutes ") + ylab("Observed Trip Duration in Minutes") +
theme(plot.title = element_text(size=16,hjust = 0.5),
axis.text.y = element_text(size=12), axis.text.x = element_text(size=12,hjust=.5),
axis.title.x = element_text(size=14), axis.title.y = element_text(size=14))
colstouse <-setdiff(names(train_data),c("starttime","start.station.id","end.station.id",
"stoptime","start.station.name","end.station.name",
"start.station.longitude","start_date",
"end.station.latitude","end.station.longitude",
"weekday","bikeid","birth.year","DATE"))
X_train<-train_data[ , which(names(train_data) %in% colstouse)]
X_train<-X_train %>%mutate(across(c(where(is.factor)), as.numeric))
summary(X_train)
library(xgboost)
X_train<-as.matrix(X_train %>% select(-tripduration))
Y_train<-train_data$tripduration
print(xgb_model)
summary(xgb_model)
trellis.par.set(caretTheme())
plot(xgb_model)
trellis.par.set(caretTheme())
plot(xgb_model, metric = "RMSE", plotType = "level",
scales = list(x = list(rot = 90)))
trellis.par.set(caretTheme())
densityplot(xgb_model, pch = "|")
y_test<-train_data$tripduration
predicted = predict(xgb_model,X_train)
residuals = y_test - predicted
RMSE = sqrt(mean(residuals^2))
cat('The root mean square error of the train data is ', round(RMSE,3),'\n')
y_test_mean = mean(y_test)
# Calculate total sum of squares
tss =  sum((y_test - y_test_mean)^2 )
# Calculate residual sum of squares
rss =  sum(residuals^2)
# Calculate R-squared
rsq  =  1 - (rss/tss)
cat('The R-square of the train data is ', round(rsq,3), '\n')
options(repr.plot.width=8, repr.plot.height=4)
my_data = as.data.frame(cbind(predicted = predicted,
observed = y_test))
# Plot predictions vs test data
ggplot(my_data,aes(predicted, observed)) + geom_point(color = "darkred", alpha = 0.5) +
geom_smooth(method=lm)+ ggtitle('Linear Regression ') + ggtitle("XGBoost: Prediction vs Test Data") +
xlab("Predecited Trip Duration in Seconds ") + ylab("Observed Trip Duration in Secons") +
theme(plot.title = element_text(size=16,hjust = 0.5),
axis.text.y = element_text(size=12), axis.text.x = element_text(size=12,hjust=.5),
axis.title.x = element_text(size=14), axis.title.y = element_text(size=14))
y_test<-test_data$tripduration
X_test<-test_data[ , which(names(test_data) %in% colstouse)]
X_test<-X_test %>%mutate(across(c(where(is.factor)), as.numeric))
predicted = predict(xgb_model,X_test)
residuals = y_test - predicted
RMSE = sqrt(mean(residuals^2))
cat('The root mean square error of the test data is ', round(RMSE,3),'\n')
y_test_mean = mean(y_test)
# Calculate total sum of squares
tss =  sum((y_test - y_test_mean)^2 )
# Calculate residual sum of squares
rss =  sum(residuals^2)
# Calculate R-squared
rsq  =  1 - (rss/tss)
cat('The R-square of the test data is ', round(rsq,3), '\n')
options(repr.plot.width=8, repr.plot.height=4)
my_data = as.data.frame(cbind(predicted = predicted,
observed = y_test))
# Plot predictions vs test data
ggplot(my_data,aes(predicted, observed)) + geom_point(color = "darkred", alpha = 0.5) +
geom_smooth(method=lm)+ ggtitle('Gradient Boosted Machines ') + ggtitle("XGBoost: Prediction vs Test Data") +
xlab("Predecited Trip Duration in Minutes ") + ylab("Observed Trip Duration in Minutes") +
theme(plot.title = element_text(size=16,hjust = 0.5),
axis.text.y = element_text(size=12), axis.text.x = element_text(size=12,hjust=.5),
axis.title.x = element_text(size=14), axis.title.y = element_text(size=14))
colstouse <-setdiff(names(train_data),c("starttime","start.station.id","end.station.id",
"stoptime","start.station.name","end.station.name",
"start.station.longitude","start_date",
"end.station.latitude","end.station.longitude",
"weekday","bikeid","birth.year","DATE","SNOW","SNWD"))
X_train<-train_data[ , which(names(train_data) %in% colstouse)]
names(X_train)
rfmodel
summary(rfmodel)
trellis.par.set(caretTheme())
densityplot(rfmodel, pch = "|")
y_test<-train_data$tripduration
predicted = predict(rfmodel,train_data)
residuals = y_test - predicted
RMSE = sqrt(mean(residuals^2))
cat('The root mean square error of the train data is ', round(RMSE,3),'\n')
y_test_mean = mean(y_test)
# Calculate total sum of squares
tss =  sum((y_test - y_test_mean)^2 )
# Calculate residual sum of squares
rss =  sum(residuals^2)
# Calculate R-squared
rsq  =  1 - (rss/tss)
cat('The R-square of the train data is ', round(rsq,3), '\n')
options(repr.plot.width=8, repr.plot.height=4)
my_data = as.data.frame(cbind(predicted = predicted,
observed = y_test))
# Plot predictions vs test data
ggplot(my_data,aes(predicted, observed)) + geom_point(color = "darkred", alpha = 0.5) +
geom_smooth(method=lm)+ ggtitle('Linear Regression ') + ggtitle("Random Forest: Prediction vs Test Data") +
xlab("Predecited Trip Duration in Seconds ") + ylab("Observed Trip Duration in Secons") +
theme(plot.title = element_text(size=16,hjust = 0.5),
axis.text.y = element_text(size=12), axis.text.x = element_text(size=12,hjust=.5),
axis.title.x = element_text(size=14), axis.title.y = element_text(size=14))
y_test<-test_data$tripduration
predicted = predict(gbmmodel,test_data)
residuals = y_test - predicted
RMSE = sqrt(mean(residuals^2))
cat('The root mean square error of the test data is ', round(RMSE,3),'\n')
y_test_mean = mean(y_test)
# Calculate total sum of squares
tss =  sum((y_test - y_test_mean)^2 )
# Calculate residual sum of squares
rss =  sum(residuals^2)
# Calculate R-squared
rsq  =  1 - (rss/tss)
cat('The R-square of the test data is ', round(rsq,3), '\n')
options(repr.plot.width=8, repr.plot.height=4)
my_data = as.data.frame(cbind(predicted = predicted,
observed = y_test))
# Plot predictions vs test data
ggplot(my_data,aes(predicted, observed)) + geom_point(color = "darkred", alpha = 0.5) +
geom_smooth(method=lm)+ ggtitle('Gradient Boosted Machines ') + ggtitle("Random Forest: Prediction vs Test Data") +
xlab("Predecited Trip Duration in Minutes ") + ylab("Observed Trip Duration in Minutes") +
theme(plot.title = element_text(size=16,hjust = 0.5),
axis.text.y = element_text(size=12), axis.text.x = element_text(size=12,hjust=.5),
axis.title.x = element_text(size=14), axis.title.y = element_text(size=14))
View(my_data)
View(citibike_2019)
knitr::opts_chunk$set(echo = TRUE, fig.pos = 'h')
library(dplyr)
library(ggplot2)
library(GGally)
library(lubridate)
library(caret)
library(gbm)
library(tidyverse)
library(caret)
citibike_2019 <- read.csv("citibike_2019.csv")
citibike_2019 <- citibike_2019[sample(nrow(citibike_2019), 20000),]
head(citibike_2019)
weather <- read.csv("2812766.csv",header=FALSE)
names(weather)<-weather[1,]
weather<-weather[-1,]
weather<-subset(weather[weather$NAME == "NY CITY CENTRAL PARK, NY US" & year(weather$DATE) == 2019,],)
attr_indexes <- names(weather) %>% grep("ATTR",x = .)
weather <- weather[,-attr_indexes]
weather <- weather[,-c(1:5)]
weather<-weather %>%mutate(across(c(where(is.character), -DATE), as.numeric))
weather$DATE<-as.Date(weather$DATE)
weather <- weather %>% select("DATE","PRCP","SNOW","SNWD","TMAX","TMIN","WT01","WDF2","WDF5","WSF2","WSF5","WT08")
weather[is.na(weather)] <- 0
head(weather)
rm(attr_indexes)
print(paste0("The citibike data consists of ", nrow(citibike_2019), " data points spread across ", ncol(citibike_2019), " features"))
plot(citibike_2019$tripduration/60)
num_long_trips_removed<- nrow(citibike_2019[citibike_2019$tripduration > 7200,])
citibike_2019<-citibike_2019[citibike_2019$tripduration<=7200,]
print(paste0("Removed ", num_long_trips_removed, " trips of longer than 2 hours."))
rm(num_long_trips_removed)
summary(citibike_2019$birth.year)
citibike_2019$age <- 2019 - citibike_2019$birth.year
num_old_age_removed<- nrow(citibike_2019[citibike_2019$age>90,])
citibike_2019<-citibike_2019[citibike_2019$age<90,]
print(paste0("Removed ", num_old_age_removed, " trips of people older thatn 90 years"))
rm(num_old_age_removed)
library(geosphere)
citibike_2019$distance <- distHaversine(citibike_2019[,6:7], citibike_2019[,10:11])
citibike_2019$dist.lat <- abs((citibike_2019$start.station.latitude - citibike_2019$end.station.latitude))
citibike_2019$dist.long <- abs((citibike_2019$start.station.longitude - citibike_2019$end.station.longitude))
summary(citibike_2019$distance)
is_weekday = function(timestamp){
lubridate::wday(timestamp, week_start = 1) < 6
}
citibike_2019$start_date<-as.Date(citibike_2019$starttime)
citibike_2019$Hour<-hour(citibike_2019$starttime)
citibike_2019$dayofweek <- as.factor(wday(citibike_2019$starttime))
citibike_2019$weekday<-as.factor(as.numeric(sapply(citibike_2019$starttime, is_weekday)))
head(citibike_2019 %>% select("Hour","dayofweek","weekday"))
citibike_2019$usertype<-as.factor(citibike_2019$usertype)
citibike_2019$gender<-as.factor(citibike_2019$gender)
citibike_2019$tripduration<-floor(citibike_2019$tripduration/60)
head(citibike_2019$tripduration)
citibike_2019 <- citibike_2019 %>% inner_join(weather, by = c("start_date" = "DATE" ))
head(citibike_2019)
load("data.Rdata")
#### compute correlations
library(Hmisc)
library(corrplot)
colstouse <-setdiff(names(citibike_2019),c("starttime","start.station.id","end.station.id",
"stoptime","start.station.name","end.station.name",
"start.station.longitude","start_date",
"end.station.latitude","end.station.longitude",
"weekday","bikeid","birth.year","DATE"))
X_train<-citibike_2019[ , which(names(citibike_2019) %in% colstouse)]%>%mutate(across(c(where(is.factor)), as.numeric))
res2<-rcorr(as.matrix(X_train))
respearson=rcorr(as.matrix(X_train),type = "pearson")
resspearman=rcorr(as.matrix(X_train),type = "spearman")
res3 <- cor(as.matrix(X_train))
#### actual correlations (not rank correlations)
corrplot(corr = res3, type = "upper", outline = T,  order="original",
sig.level = 0.05, insig = "blank", addCoef.col = "black",
title = "\nActual correlations on individual trip data",
number.cex = 1.4, number.font = 1, number.digits = 2 )
barplot(table(substring(citibike_2019$starttime, 6, 7)))
barplot(table(substring(citibike_2019$starttime, 12, 13)))
barplot(table(substring(citibike_2019$starttime, 12, 13)))
temp <- citibike_2019
boxplot(citibike_2019$tripduration ~ citibike_2019$usertype)
smp_size<- floor(0.8*nrow(citibike_2019))
set.seed(123)
train_index<-sample(seq_len(nrow(citibike_2019)), size = smp_size)
train_data <- citibike_2019[train_index,]
test_data <-  citibike_2019[- train_index,]
rm(train_index, num_long_trips_removed, smp_size)
colstouse <-setdiff(names(train_data),c("starttime","start.station.id","end.station.id",
"stoptime","start.station.name","end.station.name",
"start.station.longitude","start_date",
"end.station.latitude","end.station.longitude",
"weekday","bikeid","birth.year","PRCP","DATE","SNOW","SNWD",
"TMIN","WT01","WDF2","WDF5","WSF2","WSF5","WT08"))
X_train<-train_data[ , which(names(train_data) %in% colstouse)]
names(X_train)
linear_model<-lm(tripduration~., data = X_train)
summary(linear_model)
colstouse <-setdiff(names(train_data),c("starttime","start.station.id","end.station.id",
"stoptime","start.station.name","end.station.name",
"start.station.longitude","start_date",
"end.station.latitude","end.station.longitude",
"weekday","bikeid","birth.year","DATE","SNOW","SNWD"))
X_train<-train_data[ , which(names(train_data) %in% colstouse)]
names(X_train)
gbmmodel
summary(gbmmodel)
trellis.par.set(caretTheme())
plot(gbmmodel)
trellis.par.set(caretTheme())
plot(gbmmodel, metric = "RMSE", plotType = "level",
scales = list(x = list(rot = 90)))
trellis.par.set(caretTheme())
densityplot(gbmmodel, pch = "|")
y_test<-train_data$tripduration
predicted = predict(gbmmodel,train_data)
residuals = y_test - predicted
RMSE = sqrt(mean(residuals^2))
cat('The root mean square error of the train data is ', round(RMSE,3),'\n')
y_test_mean = mean(y_test)
# Calculate total sum of squares
tss =  sum((y_test - y_test_mean)^2 )
# Calculate residual sum of squares
rss =  sum(residuals^2)
# Calculate R-squared
rsq  =  1 - (rss/tss)
cat('The R-square of the train data is ', round(rsq,3), '\n')
options(repr.plot.width=8, repr.plot.height=4)
my_data = as.data.frame(cbind(predicted = predicted,
observed = y_test))
# Plot predictions vs test data
ggplot(my_data,aes(predicted, observed)) + geom_point(color = "darkred", alpha = 0.5) +
geom_smooth(method=lm)+ ggtitle('Linear Regression ') + ggtitle("Gradient Boosting Machine: Prediction vs Test Data") +
xlab("Predecited Trip Duration in Seconds ") + ylab("Observed Trip Duration in Seconds") +
theme(plot.title = element_text(size=16,hjust = 0.5),
axis.text.y = element_text(size=12), axis.text.x = element_text(size=12,hjust=.5),
axis.title.x = element_text(size=14), axis.title.y = element_text(size=14))
y_test<-test_data$tripduration
predicted = predict(gbmmodel,test_data)
residuals = y_test - predicted
RMSE = sqrt(mean(residuals^2))
cat('The root mean square error of the test data is ', round(RMSE,3),'\n')
y_test_mean = mean(y_test)
# Calculate total sum of squares
tss =  sum((y_test - y_test_mean)^2 )
# Calculate residual sum of squares
rss =  sum(residuals^2)
# Calculate R-squared
rsq  =  1 - (rss/tss)
cat('The R-square of the test data is ', round(rsq,3), '\n')
options(repr.plot.width=8, repr.plot.height=4)
my_data = as.data.frame(cbind(predicted = predicted,
observed = y_test))
# Plot predictions vs test data
ggplot(my_data,aes(predicted, observed)) + geom_point(color = "darkred", alpha = 0.5) +
geom_smooth(method=lm)+ ggtitle('Gradient Boosted Machines ') + ggtitle("Gradient Boosting Machines: Prediction vs Test Data") +
xlab("Predecited Trip Duration in Minutes ") + ylab("Observed Trip Duration in Minutes") +
theme(plot.title = element_text(size=16,hjust = 0.5),
axis.text.y = element_text(size=12), axis.text.x = element_text(size=12,hjust=.5),
axis.title.x = element_text(size=14), axis.title.y = element_text(size=14))
colstouse <-setdiff(names(train_data),c("starttime","start.station.id","end.station.id",
"stoptime","start.station.name","end.station.name",
"start.station.longitude","start_date",
"end.station.latitude","end.station.longitude",
"weekday","bikeid","birth.year","DATE"))
X_train<-train_data[ , which(names(train_data) %in% colstouse)]
X_train<-X_train %>%mutate(across(c(where(is.factor)), as.numeric))
summary(X_train)
library(xgboost)
X_train<-as.matrix(X_train %>% select(-tripduration))
Y_train<-train_data$tripduration
print(xgb_model)
summary(xgb_model)
trellis.par.set(caretTheme())
plot(xgb_model)
trellis.par.set(caretTheme())
plot(xgb_model, metric = "RMSE", plotType = "level",
scales = list(x = list(rot = 90)))
trellis.par.set(caretTheme())
densityplot(xgb_model, pch = "|")
y_test<-train_data$tripduration
predicted = predict(xgb_model,X_train)
residuals = y_test - predicted
RMSE = sqrt(mean(residuals^2))
cat('The root mean square error of the train data is ', round(RMSE,3),'\n')
y_test_mean = mean(y_test)
# Calculate total sum of squares
tss =  sum((y_test - y_test_mean)^2 )
# Calculate residual sum of squares
rss =  sum(residuals^2)
# Calculate R-squared
rsq  =  1 - (rss/tss)
cat('The R-square of the train data is ', round(rsq,3), '\n')
options(repr.plot.width=8, repr.plot.height=4)
my_data = as.data.frame(cbind(predicted = predicted,
observed = y_test))
# Plot predictions vs test data
ggplot(my_data,aes(predicted, observed)) + geom_point(color = "darkred", alpha = 0.5) +
geom_smooth(method=lm)+ ggtitle('Linear Regression ') + ggtitle("XGBoost: Prediction vs Test Data") +
xlab("Predecited Trip Duration in Seconds ") + ylab("Observed Trip Duration in Secons") +
theme(plot.title = element_text(size=16,hjust = 0.5),
axis.text.y = element_text(size=12), axis.text.x = element_text(size=12,hjust=.5),
axis.title.x = element_text(size=14), axis.title.y = element_text(size=14))
y_test<-test_data$tripduration
X_test<-test_data[ , which(names(test_data) %in% colstouse)]
X_test<-X_test %>%mutate(across(c(where(is.factor)), as.numeric))
predicted = predict(xgb_model,X_test)
residuals = y_test - predicted
RMSE = sqrt(mean(residuals^2))
cat('The root mean square error of the test data is ', round(RMSE,3),'\n')
y_test_mean = mean(y_test)
# Calculate total sum of squares
tss =  sum((y_test - y_test_mean)^2 )
# Calculate residual sum of squares
rss =  sum(residuals^2)
# Calculate R-squared
rsq  =  1 - (rss/tss)
cat('The R-square of the test data is ', round(rsq,3), '\n')
options(repr.plot.width=8, repr.plot.height=4)
my_data = as.data.frame(cbind(predicted = predicted,
observed = y_test))
# Plot predictions vs test data
ggplot(my_data,aes(predicted, observed)) + geom_point(color = "darkred", alpha = 0.5) +
geom_smooth(method=lm)+ ggtitle('Gradient Boosted Machines ') + ggtitle("XGBoost: Prediction vs Test Data") +
xlab("Predecited Trip Duration in Minutes ") + ylab("Observed Trip Duration in Minutes") +
theme(plot.title = element_text(size=16,hjust = 0.5),
axis.text.y = element_text(size=12), axis.text.x = element_text(size=12,hjust=.5),
axis.title.x = element_text(size=14), axis.title.y = element_text(size=14))
colstouse <-setdiff(names(train_data),c("starttime","start.station.id","end.station.id",
"stoptime","start.station.name","end.station.name",
"start.station.longitude","start_date",
"end.station.latitude","end.station.longitude",
"weekday","bikeid","birth.year","DATE","SNOW","SNWD"))
X_train<-train_data[ , which(names(train_data) %in% colstouse)]
names(X_train)
rfmodel
summary(rfmodel)
trellis.par.set(caretTheme())
densityplot(rfmodel, pch = "|")
y_test<-train_data$tripduration
predicted = predict(rfmodel,train_data)
residuals = y_test - predicted
RMSE = sqrt(mean(residuals^2))
cat('The root mean square error of the train data is ', round(RMSE,3),'\n')
y_test_mean = mean(y_test)
# Calculate total sum of squares
tss =  sum((y_test - y_test_mean)^2 )
# Calculate residual sum of squares
rss =  sum(residuals^2)
# Calculate R-squared
rsq  =  1 - (rss/tss)
cat('The R-square of the train data is ', round(rsq,3), '\n')
options(repr.plot.width=8, repr.plot.height=4)
my_data = as.data.frame(cbind(predicted = predicted,
observed = y_test))
# Plot predictions vs test data
ggplot(my_data,aes(predicted, observed)) + geom_point(color = "darkred", alpha = 0.5) +
geom_smooth(method=lm)+ ggtitle('Linear Regression ') + ggtitle("Random Forest: Prediction vs Test Data") +
xlab("Predecited Trip Duration in Seconds ") + ylab("Observed Trip Duration in Secons") +
theme(plot.title = element_text(size=16,hjust = 0.5),
axis.text.y = element_text(size=12), axis.text.x = element_text(size=12,hjust=.5),
axis.title.x = element_text(size=14), axis.title.y = element_text(size=14))
y_test<-test_data$tripduration
predicted = predict(gbmmodel,test_data)
residuals = y_test - predicted
RMSE = sqrt(mean(residuals^2))
cat('The root mean square error of the test data is ', round(RMSE,3),'\n')
y_test_mean = mean(y_test)
# Calculate total sum of squares
tss =  sum((y_test - y_test_mean)^2 )
# Calculate residual sum of squares
rss =  sum(residuals^2)
# Calculate R-squared
rsq  =  1 - (rss/tss)
cat('The R-square of the test data is ', round(rsq,3), '\n')
options(repr.plot.width=8, repr.plot.height=4)
my_data = as.data.frame(cbind(predicted = predicted,
observed = y_test))
# Plot predictions vs test data
ggplot(my_data,aes(predicted, observed)) + geom_point(color = "darkred", alpha = 0.5) +
geom_smooth(method=lm)+ ggtitle('Gradient Boosted Machines ') + ggtitle("Random Forest: Prediction vs Test Data") +
xlab("Predecited Trip Duration in Minutes ") + ylab("Observed Trip Duration in Minutes") +
theme(plot.title = element_text(size=16,hjust = 0.5),
axis.text.y = element_text(size=12), axis.text.x = element_text(size=12,hjust=.5),
axis.title.x = element_text(size=14), axis.title.y = element_text(size=14))
boxplot(citibike_2019$tripduration ~ citibike_2019$usertype)
View(citibike_2019)
boxplot(citibike_2019$tripduration ~ citibike_2019$age)
barplot(table(citibike_2019$weekday))
boxplot(citibike_2019$tripduration ~ citibike_2019$weekday)
View(citibike_2019)
barplot(citibike_2019$age)
boxplot(citibike_2019$tripduration ~ citibike_2019$age)
barplot(table(citibike_2019$age))
temp <- citibike_2019
boxplot(citibike_2019$tripduration ~ citibike_2019$age)
barplot(citibike_2019$age)
temp <- citibike_2019
barplot(citibike_2019$age)
boxplot(citibike_2019$tripduration ~ citibike_2019$age)
barplot(table(citibike_2019$age))
boxplot(citibike_2019$tripduration ~ citibike_2019$age)
barplot(table(citibike_2019$age))
barplot(table(citibike_2019$weekday))
boxplot(citibike_2019$tripduration ~ citibike_2019$weekday)
boxplot(citibike_2019$tripduration ~ citibike_2019$usertype)
barplot(table(citibike_2019$usertype))
boxplot(citibike_2019$tripduration ~ citibike_2019$SNOW)
boxplot(citibike_2019$tripduration ~ citibike_2019$SNOW)
barplot(table(citibike_2019$SNOW))
boxplot(citibike_2019$tripduration ~ citibike_2019$SNOW)
boxplot(citibike_2019$tripduration ~ citibike_2019$gender)
barplot(table(citibike_2019$age))
barplot(table(substring(citibike_2019$starttime, 6, 7)), col=rainbow(12))
barplot(table(substring(citibike_2019$starttime, 6, 7)), col=rainbow(12), xlab="Months", "# of rides taken")
barplot(table(substring(citibike_2019$starttime, 6, 7)), col=rainbow(12), xlab="Months", ylab="# of rides taken")
barplot(table(substring(citibike_2019$starttime, 6, 7)), col=rainbow(12), xlab="Months", ylab="# of rides taken", main="# of rides taken during each month of the year in 2019")
barplot(table(substring(citibike_2019$starttime, 12, 13)), col=rainbow(24), xlab="Hours", ylab="# of rides taken", main="# of rides taken during each hour of the day in 2019")
table(citibike_2019$weekday)
table(citibike_2019$weekday)[0]
table(citibike_2019$weekday)[3]
table(citibike_2019$weekday)[1]
table(citibike_2019$weekday)[2]
axis(1, at = 0:1, labels = c("Weekday", "Weekend"))
barplot(table(citibike_2019$weekday), col=rainbow(12), xlab="Type of Day (1 = Weekend and 0 = Weekday)", ylab="# of rides taken", main="# of rides taken during each month of the year in 2019")
axis(1, at = 0:1, labels = c("Weekday", "Weekend"))
barplot(table(citibike_2019$weekday), col=rainbow(12), xlab="Type of Day (1 = Weekend and 0 = Weekday)", ylab="# of rides taken", main="# of rides taken during each month of the year in 2019")
barplot(table(citibike_2019$weekday), col=rainbow(12), xlab="Type of Day (1 = Weekend and 0 = Weekday)", ylab="# of rides taken", main="# of rides taken during weekends vs weekdays")
barplot(table(substring(citibike_2019$starttime, 6, 7)), col=rainbow(12), xlab="Months", ylab="# of rides taken", main="# of rides taken during each month of the year in 2019", ylim = 4000)
barplot(table(substring(citibike_2019$starttime, 6, 7)), col=rainbow(12), xlab="Months", ylab="# of rides taken", main="# of rides taken during each month of the year in 2019")
barplot(table(substring(citibike_2019$starttime, 6, 7)), col=rainbow(12), xlab="Months", ylab="# of rides taken", main="# of rides taken during each month of the year in 2019", ylim=3000)
barplot(table(substring(citibike_2019$starttime, 6, 7)), col=rainbow(12), xlab="Months", ylab="# of rides taken", main="# of rides taken during each month of the year in 2019", ylim=c(0, 3000)
barplot(table(substring(citibike_2019$starttime, 6, 7)), col=rainbow(12), xlab="Months", ylab="# of rides taken", main="# of rides taken during each month of the year in 2019", ylim=c(0, 3000))
?barplot
barplot(table(substring(citibike_2019$starttime, 6, 7)), col=rainbow(12), xlab="Months", ylab="# of rides taken", main="# of rides taken during each month of the year in 2019", ylim=c(0, 3000))
barplot(table(substring(citibike_2019$starttime, 6, 7)), col=rainbow(12), xlab="Months", ylab="# of rides taken", main="# of rides taken during each month of the year in 2019", ylim=c(0, 2500))
barplot(table(substring(citibike_2019$starttime, 6, 7)), col=rainbow(12), xlab="Months", ylab="# of rides taken", main="# of rides taken during each month of the year in 2019", ylim=c(0, 2700))
barplot(table(substring(citibike_2019$starttime, 6, 7)), col=rainbow(12), xlab="Months", ylab="# of rides taken", main="# of rides taken during each month of the year in 2019", ylim=c(0, 3000))
barplot(table(substring(citibike_2019$starttime, 12, 13)), col=rainbow(24), xlab="Hours", ylab="# of rides taken", main="# of rides taken during each hour of the day in 2019", ylim=c(0, 3000))
barplot(table(substring(citibike_2019$starttime, 12, 13)), col=rainbow(24), xlab="Hours", ylab="# of rides taken", main="# of rides taken during each hour of the day in 2019", ylim=c(0, 2000))
barplot(table(citibike_2019$weekday), col=rainbow(12), xlab="Type of Day (1 = Weekend and 0 = Weekday)", ylab="# of rides taken", main="# of rides taken during weekends vs weekdays", ylim=c(0, 1500))
barplot(table(citibike_2019$weekday), col=rainbow(12), xlab="Type of Day (1 = Weekend and 0 = Weekday)", ylab="# of rides taken", main="# of rides taken during weekends vs weekdays", )
barplot(table(citibike_2019$weekday), col=rainbow(12), xlab="Type of Day (1 = Weekend and 0 = Weekday)", ylab="# of rides taken", main="# of rides taken during weekends vs weekdays", ylim=c(0, 15000))
barplot(table(citibike_2019$weekday), col=rainbow(12), xlab="Type of Day (1 = Weekend and 0 = Weekday)", ylab="# of rides taken", main="# of rides taken during weekends vs weekdays", ylim=c(0, 16000))
barplot(table(citibike_2019$weekday), col=rainbow(12), xlab="Type of Day (1 = Weekend and 0 = Weekday)", ylab="# of rides taken", main="# of rides taken during weekends vs weekdays", ylim=c(0, 17000))
barplot(table(citibike_2019$weekday), col=rainbow(12), xlab="Type of Day (1 = Weekend and 0 = Weekday)", ylab="# of rides taken", main="# of rides taken during weekends vs weekdays", ylim=c(0, 20000))
barplot(table(citibike_2019$weekday), col=rainbow(12), xlab="Type of Day (1 = Weekend and 0 = Weekday)", ylab="# of rides taken", main="# of rides taken during weekends vs weekdays", ylim=c(0, 18000))
barplot(table(citibike_2019$weekday), col=rainbow(12), xlab="Type of Day (1 = Weekend and 0 = Weekday)", ylab="# of rides taken", main="# of rides taken during weekends vs weekdays", ylim=c(0, 19000))
barplot(table(citibike_2019$weekday), col=rainbow(12), xlab="Type of Day (1 = Weekend and 0 = Weekday)", ylab="# of rides taken", main="# of rides taken during weekends vs weekdays", ylim=c(0, 20000))
boxplot(citibike_2019$tripduration ~ citibike_2019$usertype, col=rainbow(2), xlab="Type of User", ylab="Trip duration", main="Duration of trips for Customer vs Subscriber", ylim=c(0, 20000))
boxplot(citibike_2019$tripduration ~ citibike_2019$usertype, col=rainbow(2), xlab="Type of User", ylab="Trip duration", main="Duration of trips for Customer vs Subscriber")
barplot(table(citibike_2019$usertype))
boxplot(citibike_2019$tripduration ~ citibike_2019$usertype, col=rainbow(2), xlab="Type of User", ylab="Trip duration", main="Duration of trips for Customer vs Subscriber")
barplot(table(citibike_2019$usertype), col=rainbow(2), xlab="Type of User", ylab="# of rides taken", main="# of rides taken by Customer vs Subscriber", ylim=c(0, 20000))
barplot(table(citibike_2019$age), col=rainbow(20), xlab="User Age", ylab="# of rides taken", main="# of rides taken by users of different ages", ylim=c(0, 20000))
barplot(table(citibike_2019$age), col=rainbow(20), xlab="User Age", ylab="# of rides taken", main="# of rides taken by users of different ages", ylim=c(0, 2000))
barplot(table(citibike_2019$age), col=rainbow(30), xlab="User Age", ylab="# of rides taken", main="# of rides taken by users of different ages", ylim=c(0, 2000))
barplot(table(citibike_2019$age), col=rainbow(30), xlab="User Age", ylab="# of rides taken", main="# of rides taken by users of different ages", ylim=c(0, 1000))
barplot(table(citibike_2019$age), col=rainbow(30), xlab="User Age", ylab="# of rides taken", main="# of rides taken by users of different ages", ylim=c(0, 1500))
barplot(table(citibike_2019$age), col=rainbow(30), xlab="User Age", ylab="# of rides taken", main="# of rides taken by users of different ages", ylim=c(0, 1600))
barplot(table(citibike_2019$age), col=rainbow(30), xlab="User Age", ylab="# of rides taken", main="# of rides taken by users of different ages", ylim=c(0, 1700))
barplot(table(citibike_2019$age), col=rainbow(30), xlab="User Age", ylab="# of rides taken", main="# of rides taken by users of different ages", ylim=c(0, 1800))
barplot(table(citibike_2019$age), col=rainbow(30), xlab="User Age", ylab="# of rides taken", main="# of rides taken by users of different ages", ylim=c(0, 1900))
barplot(table(citibike_2019$age), col=rainbow(30), xlab="User Age", ylab="# of rides taken", main="# of rides taken by users of different ages", ylim=c(0, 2000))
boxplot(citibike_2019$tripduration ~ citibike_2019$age, col=rainbow(30), xlab="User Age", ylab="# of rides taken", main="# of rides taken by users of different ages")
boxplot(citibike_2019$tripduration ~ citibike_2019$age, col=rainbow(30), xlab="User Age", ylab="Trip duration", main="Duration of trips for riders of different ages")
boxplot(citibike_2019$tripduration ~ citibike_2019$age, col=rainbow(30), xlab="User Age", ylab="Trip duration", main="Duration of trips for riders of different ages")
barplot(table(citibike_2019$age), col=rainbow(30), xlab="User Age", ylab="# of rides taken", main="# of rides taken by users of different ages", ylim=c(0, 2000))
tinytex::install_tinytex()
